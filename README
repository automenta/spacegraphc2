SpaceGraph-C v2.0		http://automenta.com

-------------------------

SpaceGraph-C is an interactive simulation system for any abstract purpose, including, but not limited to:

  Desktop Applications

  Data Visualization

  Artificial Intelligence and Evolutionary Algorithm Simulation

  Software Development

  Social Networking

  Multimedia Production
 
-------------------------

Code:
	src/
		The SpaceGraph rendering environment and control systems.

	bullet-src/ & bullet-gl/
		These are exact copies of the Bullet-2.77 physics engine 'src' and 'Demos/OpenGL' directories...
		...except that the BulletMultiThreaded/GpuSoftBodySolvers directory was removed when it didn't compile as-is under Ubuntu linux.
		(A more careful cross-platform facility may not require it's removal in the future.)

		The purpose being that when new bullet versions are released, they can be dropped-in.

	The Makefile was generated from NetBeans 6.9 and the NetBeans project files are included for immediate opening.

-------------------------

Development Plan:

	Cell 
		add(Process* p)
		remove(Process *p)
		update(dt)

	CellProcess
		update(dt)
		
	BodyProcess extends CellProcess
		Vector3f color
		String name
		update(dt)
		onTouched(world, normal)
		onPressed(world, normal, pressed?)
		onDragged(...)
		onDrawn(gl)
		getActionButtons()

	BrainProcess extends CellProcess
		getSize()
		BrainInterface alloc(key, unsigned inputs, unsigned outputs)
		addNeuron(Neuron n, vector<Neuron> inputs, vector<Neuron> outputs)
		getRandomNeuron(float probabilityInput, floatProbabilityOutput, float 
		update(dt)
		~Brain()
			unalloc(key)?

	Neuron extends CellProcess

	InputNeuron extends Neuron

	OutputNeuron extends Neuron

	IzhikevichNeuron extends Neuron
		[ map all of CritterDrug's neural modulators to this class's activity ]

	BrainInput extends CellProcess
		a vector of InputNeurons

	BrainOutput extends CellProcess
		a vector of OutputNeurons

	BrainMap(unsigned inputs, unsigned outputs) extends CellProcess
		instantiates 2 inputs and 2 outputs and directly propagates signals across. used to link 2 brains

		update()

--------

[16:36] <sseehh__> once its all ported then i can grow it to new features
[16:37] <sseehh__> including the in-world controls
[16:37] <sseehh__> for building and manipulating creatures
[16:37] <sseehh__> like tables and benches and factories
[16:37] <sseehh__> with switches and sliders
[16:37] <sseehh__> then the creatures will eventually be capable of building other creatures
[16:37] <flamt> :|
[16:37] <sseehh__> pushing buttons, looking at readouts
[16:38] <sseehh__> AI engines will become useful
[16:38] <sseehh__> we can input semantic data directly into cognition engines, for instance
[16:38] <sseehh__> bypassing low-level neural stuff
[16:38] <sseehh__> but still including it
[16:38] <sseehh__> for things like vision and balancing
[16:38] <flamt> that will be a very rich world
[16:38] <flamt> comparatively
[16:38] <flamt> like greg egan